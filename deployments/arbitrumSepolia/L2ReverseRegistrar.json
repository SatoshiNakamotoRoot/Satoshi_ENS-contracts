{
  "address": "0x60a384Cfbb088Aa8c1750A04548b1b983CDc0418",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_L2ReverseNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_coinType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOfContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ReverseClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "L2ReverseNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inceptionDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "clearRecordsWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coinType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodehash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicallWithNodeCheck",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setNameForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "inceptionDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setNameForAddrWithSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "inceptionDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setNameForAddrWithSignatureAndOwnable",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setTextForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "inceptionDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setTextForAddrWithSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "inceptionDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setTextForAddrWithSignatureAndOwnable",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x699714073bacd57728ef981bef3e4e54c123c3c57bbc1082faf4c42651d5433f",
  "receipt": {
    "to": null,
    "from": "0xDBBC2C0fe2a1D0fB4056B35a22e543bEb715E7FC",
    "contractAddress": "0x60a384Cfbb088Aa8c1750A04548b1b983CDc0418",
    "transactionIndex": 1,
    "gasUsed": "2249278",
    "logsBloom": "0x
    "blockHash": "0x6cfb0c0ae125e7cee30d13f27f01078e734d45c65cecd831db4cfa982aaf7b87",
    "transactionHash": "0x699714073bacd57728ef981bef3e4e54c123c3c57bbc1082faf4c42651d5433f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16530073,
        "transactionHash": "0x699714073bacd57728ef981bef3e4e54c123c3c57bbc1082faf4c42651d5433f",
        "address": "0x60a384Cfbb088Aa8c1750A04548b1b983CDc0418",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbbc2c0fe2a1d0fb4056b35a22e543beb715e7fc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6cfb0c0ae125e7cee30d13f27f01078e734d45c65cecd831db4cfa982aaf7b87"
      }
    ],
    "blockNumber": 16530073,
    "cumulativeGasUsed": "2249278",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0548020c8d27ff997cf60e1d8d4f1279ceb30239b2251f914df7112595b078dd",
    2147905262
  ],
  "numDeployments": 4,
  "solcInputHash": "18e525de6f273adfb848ef1e49b08e83",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_L2ReverseNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_coinType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureOutOfDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ReverseClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"L2ReverseNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inceptionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"clearRecordsWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inceptionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setNameForAddrWithSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inceptionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setNameForAddrWithSignatureAndOwnable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setTextForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inceptionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setTextForAddrWithSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inceptionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setTextForAddrWithSignatureAndOwnable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(address)\":{\"params\":{\"addr\":\"The node to update.\"}},\"clearRecordsWithSignature(address,uint256,bytes)\":{\"params\":{\"addr\":\"The node to update.\",\"signature\":\"A signature proving ownership of the node.\"}},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"node(address)\":{\"details\":\"Returns the node hash for a given account's reverse records.\",\"params\":{\"addr\":\"The address to hash\"},\"returns\":{\"_0\":\"The ENS node hash.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setName(string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the calling account.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddr(address,string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the addr provided account. Can be used if the addr is a contract that is owned by a SCW.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddrWithSignature(address,string,uint256,bytes)\":{\"details\":\"Sets the name for an addr using a signature that can be verified with ERC1271.\",\"params\":{\"addr\":\"The reverse record to set\",\"inceptionDate\":\"Date from when this signature is valid from\",\"name\":\"The name of the reverse record\",\"signature\":\"The resolver of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddrWithSignatureAndOwnable(address,address,string,uint256,bytes)\":{\"details\":\"Sets the name for a contract that is owned by a SCW using a signature\",\"params\":{\"contractAddr\":\"The reverse node to set\",\"inceptionDate\":\"Date from when this signature is valid from\",\"name\":\"The name of the reverse record\",\"owner\":\"The owner of the contract (via Ownable)\",\"signature\":\"The signature of an address that will return true on isValidSignature for the owner\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setText(string,string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the calling account.\",\"params\":{\"key\":\"The key for this text record.\",\"value\":\"The value to set for this text record.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setTextForAddr(address,string,string)\":{\"details\":\"Sets the `text(key)` record for the reverse ENS record associated with the addr provided account.\",\"params\":{\"key\":\"The key for this text record.\",\"value\":\"The value to set for this text record.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setTextForAddrWithSignature(address,string,string,uint256,bytes)\":{\"details\":\"Sets the name for an addr using a signature that can be verified with ERC1271.\",\"params\":{\"addr\":\"The reverse record to set\",\"inceptionDate\":\"Date from when this signature is valid from\",\"key\":\"The key of the text record\",\"signature\":\"The resolver of the reverse node\",\"value\":\"The value of the text record\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setTextForAddrWithSignatureAndOwnable(address,address,string,string,uint256,bytes)\":{\"details\":\"Sets the name for a contract that is owned by a SCW using a signature\",\"params\":{\"contractAddr\":\"The reverse node to set\",\"inceptionDate\":\"Date from when this signature is valid from\",\"key\":\"The name of the reverse record\",\"owner\":\"The owner of the contract (via Ownable)\",\"signature\":\"The signature of an address that will return true on isValidSignature for the owner\",\"value\":\"The name of the reverse record\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(address)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"clearRecordsWithSignature(address,uint256,bytes)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"notice\":\"A L2 reverser registrar. Deployed to each L2 chain. The contract will be verified on L1 Reverse Resolver under the namespace specified at constructor\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/L2ReverseRegistrar.sol\":\"L2ReverseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/resolvers/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, ERC165 {\\n    function _multicall(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(\\n                    txNamehash == nodehash,\\n                    \\\"multicall: All records must have a matching namehash\\\"\\n                );\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as EthRegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IMulticallable).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1063a9dd3b94ba304624d5ec6deb43c1916640758ae970eece4d4e3ef8b2fcb1\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IL2ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IL2ReverseRegistrar {\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function setNameForAddrWithSignatureAndOwnable(\\n        address contractAddr,\\n        address owner,\\n        string memory name,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external returns (bytes32);\\n\\n    function setText(\\n        string calldata key,\\n        string calldata value\\n    ) external returns (bytes32);\\n\\n    function setTextForAddr(\\n        address addr,\\n        string calldata key,\\n        string calldata value\\n    ) external returns (bytes32);\\n\\n    function setTextForAddrWithSignatureAndOwnable(\\n        address contractAddr,\\n        address owner,\\n        string calldata key,\\n        string calldata value,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external returns (bytes32);\\n\\n    function clearRecords(address addr) external;\\n\\n    function name(bytes32 node) external view returns (string memory);\\n\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xaa0f31dab9896203c57590aa6ff71b6b286603da4ee3c0016100dda68ac1035a\"},\"contracts/reverseRegistrar/ISignatureReverseResolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ISignatureReverseResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    function setNameForAddrWithSignature(\\n        address addr,\\n        string memory name,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external returns (bytes32);\\n\\n    function setTextForAddrWithSignature(\\n        address addr,\\n        string calldata key,\\n        string calldata value,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external returns (bytes32);\\n\\n    function clearRecordsWithSignature(\\n        address addr,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external;\\n\\n    function node(address addr) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb5b94ce60b22a90ba943b5c2e642c3460ade7f93a9e794e58fbf6d525cfc467d\"},\"contracts/reverseRegistrar/L2ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IL2ReverseRegistrar.sol\\\";\\nimport \\\"./SignatureReverseResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../resolvers/profiles/ITextResolver.sol\\\";\\nimport \\\"../resolvers/profiles/INameResolver.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\nimport \\\"../resolvers/Multicallable.sol\\\";\\nimport \\\"../utils/LowLevelCallUtils.sol\\\";\\n\\nerror NotOwnerOfContract();\\n\\n/**\\n * A L2 reverser registrar. Deployed to each L2 chain.\\n * The contract will be verified on L1 Reverse Resolver under the namespace specified at constructor\\n */\\ncontract L2ReverseRegistrar is\\n    Multicallable,\\n    Ownable,\\n    IL2ReverseRegistrar,\\n    SignatureReverseResolver\\n{\\n    using ECDSA for bytes32;\\n\\n    bytes32 public immutable L2ReverseNode;\\n\\n    /*\\n     * @dev Constructor\\n     * @param _L2ReverseNode The namespace to set. The converntion is '${cointype}.reverse'\\n     * @param _coinType The cointype converted from the chainId of the chain this contract is deployed to.\\n     */\\n    constructor(\\n        bytes32 _L2ReverseNode,\\n        uint256 _coinType\\n    ) SignatureReverseResolver(_L2ReverseNode, _coinType) {\\n        L2ReverseNode = _L2ReverseNode;\\n    }\\n\\n    modifier ownerAndAuthorisedWithSignature(\\n        bytes32 hash,\\n        address addr,\\n        address owner,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) {\\n        isOwnerAndAuthorisedWithSignature(\\n            hash,\\n            addr,\\n            owner,\\n            inceptionDate,\\n            signature\\n        );\\n        _;\\n    }\\n\\n    function isAuthorised(address addr) internal view override returns (bool) {\\n        if (addr != msg.sender && !ownsContract(addr, msg.sender)) {\\n            revert Unauthorised();\\n        }\\n    }\\n\\n    function isOwnerAndAuthorisedWithSignature(\\n        bytes32 hash,\\n        address addr,\\n        address owner,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        bytes32 message = keccak256(\\n            abi.encodePacked(hash, addr, owner, inceptionDate, coinType)\\n        ).toEthSignedMessageHash();\\n        bytes32 node = _getNamehash(addr);\\n\\n        if (!ownsContract(addr, owner)) {\\n            revert NotOwnerOfContract();\\n        }\\n\\n        if (\\n            !SignatureChecker.isValidERC1271SignatureNow(\\n                owner,\\n                message,\\n                signature\\n            )\\n        ) {\\n            revert InvalidSignature();\\n        }\\n\\n        if (\\n            inceptionDate <= lastUpdated[node] || // must be newer than current record\\n            inceptionDate / 1000 >= block.timestamp // must be in the past\\n        ) {\\n            revert SignatureOutOfDate();\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the name for a contract that is owned by a SCW using a signature\\n     * @param contractAddr The reverse node to set\\n     * @param owner The owner of the contract (via Ownable)\\n     * @param name The name of the reverse record\\n     * @param inceptionDate Date from when this signature is valid from\\n     * @param signature The signature of an address that will return true on isValidSignature for the owner\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddrWithSignatureAndOwnable(\\n        address contractAddr,\\n        address owner,\\n        string memory name,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    )\\n        public\\n        ownerAndAuthorisedWithSignature(\\n            keccak256(\\n                abi.encodePacked(\\n                    IL2ReverseRegistrar\\n                        .setNameForAddrWithSignatureAndOwnable\\n                        .selector,\\n                    name\\n                )\\n            ),\\n            contractAddr,\\n            owner,\\n            inceptionDate,\\n            signature\\n        )\\n        returns (bytes32)\\n    {\\n        bytes32 node = _getNamehash(contractAddr);\\n        _setName(node, name, inceptionDate);\\n        emit NameChanged(node, name);\\n        emit ReverseClaimed(contractAddr, node);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return setNameForAddr(msg.sender, name);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the addr provided account.\\n     * Can be used if the addr is a contract that is owned by a SCW.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n\\n    function setNameForAddr(\\n        address addr,\\n        string memory name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _getNamehash(addr);\\n        _setName(node, name, block.timestamp);\\n        emit ReverseClaimed(addr, node);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the name for a contract that is owned by a SCW using a signature\\n     * @param contractAddr The reverse node to set\\n     * @param owner The owner of the contract (via Ownable)\\n     * @param key The name of the reverse record\\n     * @param value The name of the reverse record\\n     * @param inceptionDate Date from when this signature is valid from\\n     * @param signature The signature of an address that will return true on isValidSignature for the owner\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setTextForAddrWithSignatureAndOwnable(\\n        address contractAddr,\\n        address owner,\\n        string calldata key,\\n        string calldata value,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    )\\n        public\\n        ownerAndAuthorisedWithSignature(\\n            keccak256(\\n                abi.encodePacked(\\n                    IL2ReverseRegistrar\\n                        .setTextForAddrWithSignatureAndOwnable\\n                        .selector,\\n                    key,\\n                    value\\n                )\\n            ),\\n            contractAddr,\\n            owner,\\n            inceptionDate,\\n            signature\\n        )\\n        returns (bytes32)\\n    {\\n        bytes32 node = _getNamehash(contractAddr);\\n        _setText(node, key, value, inceptionDate);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account.\\n     * @param key The key for this text record.\\n     * @param value The value to set for this text record.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setText(\\n        string calldata key,\\n        string calldata value\\n    ) public override returns (bytes32) {\\n        return setTextForAddr(msg.sender, key, value);\\n    }\\n\\n    /**\\n     * @dev Sets the `text(key)` record for the reverse ENS record associated with\\n     * the addr provided account.\\n     * @param key The key for this text record.\\n     * @param value The value to set for this text record.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n\\n    function setTextForAddr(\\n        address addr,\\n        string calldata key,\\n        string calldata value\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 node = _getNamehash(addr);\\n        _setText(node, key, value, block.timestamp);\\n        return node;\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view virtual override returns (string memory) {\\n        return _text(node, key);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(\\n        bytes32 node\\n    ) external view virtual override returns (string memory) {\\n        return _name(node);\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param addr The node to update.\\n     */\\n    function clearRecords(address addr) public virtual authorised(addr) {\\n        _clearRecords(addr);\\n    }\\n\\n    function ownsContract(\\n        address contractAddr,\\n        address addr\\n    ) internal view returns (bool) {\\n        try Ownable(contractAddr).owner() returns (address owner) {\\n            return owner == addr;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    )\\n        public\\n        view\\n        override(Multicallable, SignatureReverseResolver)\\n        returns (bool)\\n    {\\n        return\\n            interfaceID == type(IL2ReverseRegistrar).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x68f6735c84966c0630b4b9bb1c3788541ee4ade55fd6e61ec5b57c5af0d35c11\"},\"contracts/reverseRegistrar/SignatureReverseResolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./ISignatureReverseResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\nimport \\\"../utils/LowLevelCallUtils.sol\\\";\\n\\nerror InvalidSignature();\\nerror SignatureOutOfDate();\\nerror Unauthorised();\\n\\ncontract SignatureReverseResolver is Ownable, ISignatureReverseResolver {\\n    using ECDSA for bytes32;\\n    mapping(bytes32 => uint256) public lastUpdated;\\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\\n    mapping(bytes32 => uint64) internal recordVersions;\\n\\n    bytes32 public immutable parentNode;\\n    uint256 public immutable coinType;\\n\\n    /*\\n     * @dev Constructor\\n     * @param parentNode The namespace to set.\\n     * @param _coinType The cointype converted from the chainId of the chain this contract is deployed to.\\n     */\\n    constructor(bytes32 _parentNode, uint256 _coinType) {\\n        parentNode = _parentNode;\\n        coinType = _coinType;\\n    }\\n\\n    modifier authorised(address addr) {\\n        isAuthorised(addr);\\n        _;\\n    }\\n\\n    modifier authorisedSignature(\\n        bytes32 hash,\\n        address addr,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) {\\n        isAuthorisedWithSignature(hash, addr, inceptionDate, signature);\\n        _;\\n    }\\n\\n    function getLastUpdated(\\n        bytes32 node\\n    ) internal view virtual returns (uint256) {\\n        return lastUpdated[node];\\n    }\\n\\n    function isAuthorised(address addr) internal view virtual returns (bool) {}\\n\\n    function isAuthorisedWithSignature(\\n        bytes32 hash,\\n        address addr,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        bytes32 message = keccak256(\\n            abi.encodePacked(hash, addr, inceptionDate, coinType)\\n        ).toEthSignedMessageHash();\\n        bytes32 node = _getNamehash(addr);\\n\\n        if (!SignatureChecker.isValidSignatureNow(addr, message, signature)) {\\n            revert InvalidSignature();\\n        }\\n\\n        if (\\n            inceptionDate <= lastUpdated[node] || // must be newer than current record\\n            inceptionDate / 1000 >= block.timestamp // must be in the past\\n        ) {\\n            revert SignatureOutOfDate();\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the name for an addr using a signature that can be verified with ERC1271.\\n     * @param addr The reverse record to set\\n     * @param name The name of the reverse record\\n     * @param inceptionDate Date from when this signature is valid from\\n     * @param signature The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddrWithSignature(\\n        address addr,\\n        string memory name,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    )\\n        public\\n        authorisedSignature(\\n            keccak256(\\n                abi.encodePacked(\\n                    ISignatureReverseResolver\\n                        .setNameForAddrWithSignature\\n                        .selector,\\n                    name\\n                )\\n            ),\\n            addr,\\n            inceptionDate,\\n            signature\\n        )\\n        returns (bytes32)\\n    {\\n        bytes32 node = _getNamehash(addr);\\n        _setName(node, name, inceptionDate);\\n        emit ReverseClaimed(addr, node);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the name for an addr using a signature that can be verified with ERC1271.\\n     * @param addr The reverse record to set\\n     * @param key The key of the text record\\n     * @param value The value of the text record\\n     * @param inceptionDate Date from when this signature is valid from\\n     * @param signature The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setTextForAddrWithSignature(\\n        address addr,\\n        string calldata key,\\n        string calldata value,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    )\\n        public\\n        authorisedSignature(\\n            keccak256(\\n                abi.encodePacked(\\n                    ISignatureReverseResolver\\n                        .setTextForAddrWithSignature\\n                        .selector,\\n                    key,\\n                    value\\n                )\\n            ),\\n            addr,\\n            inceptionDate,\\n            signature\\n        )\\n        returns (bytes32)\\n    {\\n        bytes32 node = _getNamehash(addr);\\n        _setText(node, key, value, inceptionDate);\\n        return node;\\n    }\\n\\n    function _setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value,\\n        uint256 inceptionDate\\n    ) internal {\\n        versionable_texts[recordVersions[node]][node][key] = value;\\n        _setLastUpdated(node, inceptionDate);\\n        emit TextChanged(node, key, key, value);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function _text(\\n        bytes32 node,\\n        string calldata key\\n    ) internal view returns (string memory) {\\n        return versionable_texts[recordVersions[node]][node][key];\\n    }\\n\\n    function _setName(\\n        bytes32 node,\\n        string memory newName,\\n        uint256 inceptionDate\\n    ) internal virtual {\\n        versionable_names[recordVersions[node]][node] = newName;\\n        _setLastUpdated(node, inceptionDate);\\n        emit NameChanged(node, newName);\\n    }\\n\\n    function _name(bytes32 node) internal view returns (string memory) {\\n        return versionable_names[recordVersions[node]][node];\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param addr The node to update.\\n     */\\n    function _clearRecords(address addr) internal {\\n        bytes32 labelHash = LowLevelCallUtils.sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(parentNode, labelHash)\\n        );\\n        recordVersions[reverseNode]++;\\n        emit VersionChanged(reverseNode, recordVersions[reverseNode]);\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param addr The node to update.\\n     * @param signature A signature proving ownership of the node.\\n     */\\n    function clearRecordsWithSignature(\\n        address addr,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    )\\n        public\\n        authorisedSignature(\\n            keccak256(\\n                abi.encodePacked(\\n                    ISignatureReverseResolver.clearRecordsWithSignature.selector\\n                )\\n            ),\\n            addr,\\n            inceptionDate,\\n            signature\\n        )\\n    {\\n        _clearRecords(addr);\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    parentNode,\\n                    LowLevelCallUtils.sha3HexAddress(addr)\\n                )\\n            );\\n    }\\n\\n    function _getNamehash(address addr) internal view returns (bytes32) {\\n        bytes32 labelHash = LowLevelCallUtils.sha3HexAddress(addr);\\n        return keccak256(abi.encodePacked(parentNode, labelHash));\\n    }\\n\\n    function _setLastUpdated(bytes32 node, uint256 inceptionDate) internal {\\n        lastUpdated[node] = inceptionDate;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual returns (bool) {\\n        return interfaceID == type(ISignatureReverseResolver).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x744b95377116387834e4361b374818cf3968229237250cdb24b8da1809a74432\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"contracts/utils/LowLevelCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LowLevelCallUtils {\\n    // This is the hex encoding of the string 'abcdefghijklmnopqrstuvwxyz'\\n    // It is used as a constant to lookup the characters of the hex address\\n    bytes32 constant lookup =\\n        0x3031323334353637383961626364656600000000000000000000000000000000;\\n    using Address for address;\\n\\n    /**\\n     * @dev Makes a static call to the specified `target` with `data`. Return data can be fetched with\\n     *      `returnDataSize` and `readReturnData`.\\n     * @param target The address to staticcall.\\n     * @param data The data to pass to the call.\\n     * @return success True if the call succeeded, or false if it reverts.\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bool success) {\\n        require(\\n            target.isContract(),\\n            \\\"LowLevelCallUtils: static call to non-contract\\\"\\n        );\\n        assembly {\\n            success := staticcall(\\n                gas(),\\n                target,\\n                add(data, 32),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the size of the return data of the most recent external call.\\n     */\\n    function returnDataSize() internal pure returns (uint256 len) {\\n        assembly {\\n            len := returndatasize()\\n        }\\n    }\\n\\n    /**\\n     * @dev Reads return data from the most recent external call.\\n     * @param offset Offset into the return data.\\n     * @param length Number of bytes to return.\\n     */\\n    function readReturnData(\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (bytes memory data) {\\n        data = new bytes(length);\\n        assembly {\\n            returndatacopy(add(data, 32), offset, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with the return data from the most recent external call.\\n     */\\n    function propagateRevert() internal pure {\\n        assembly {\\n            returndatacopy(0, 0, returndatasize())\\n            revert(0, returndatasize())\\n        }\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) internal pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7cb7b5ffa76e35a8d7f481ba8263a2904ee638546d0334df856f4e2e43fe8b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620023e5380380620023e58339810160408190526200003491620000a4565b8181620000413362000054565b60809190915260a0525060c052620000c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000b857600080fd5b505080516020909101519092909150565b60805160a05160c0516122c96200011c600039600061029e015260008181610200015281816109b50152610e4d015260008181610227015281816106d501528181610b0901526112c301526122c96000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063a9c73e80116100e3578063c47f00271161008c578063e32954eb11610066578063e32954eb14610393578063f2fde38b146103a6578063fe43ca31146103b957600080fd5b8063c47f00271461035a578063c7ee930c1461036d578063c91199411461038057600080fd5b8063bffbe61c116100bd578063bffbe61c14610321578063c01f93d314610334578063c0a404bc1461034757600080fd5b8063a9c73e80146102db578063ac9650d8146102ee578063b557a1ff1461030e57600080fd5b806359d1d43c116101455780637f87032e1161011f5780637f87032e1461028657806380d8db3d146102995780638da5cb5b146102c057600080fd5b806359d1d43c14610249578063691f343114610269578063715018a61461027c57600080fd5b80630affd653116101765780630affd653146101e85780631fe93ea8146101fb57806324d79eab1461022257600080fd5b806301ffc9a714610192578063060eb2f5146101ba575b600080fd5b6101a56101a036600461169d565b6103cc565b60405190151581526020015b60405180910390f35b6101da6101c83660046116c7565b60016020526000908152604090205481565b6040519081526020016101b1565b6101da6101f6366004611798565b610435565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b61025c61025736600461186d565b610528565b6040516101b19190611909565b61025c6102773660046116c7565b61053d565b610284610548565b005b6101da61029436600461191c565b61055c565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b0390911681526020016101b1565b6101da6102e936600461199c565b610613565b6103016102fc366004611a4d565b61062b565b6040516101b19190611a8f565b6101da61031c366004611af1565b610640565b6101da61032f366004611bb3565b6106d1565b6101da610342366004611bd0565b61072c565b610284610355366004611bb3565b6107b9565b6101da610368366004611c80565b6107d1565b61028461037b366004611cb5565b6107dd565b6101da61038e366004611d0e565b610841565b6103016103a1366004611d5e565b6108a4565b6102846103b4366004611bb3565b6108b1565b6101da6103c7366004611d9d565b610946565b60006001600160e01b031982167f1528feca00000000000000000000000000000000000000000000000000000000148061042f57507fc78de5ed000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60405160009061046b907f0affd65300000000000000000000000000000000000000000000000000000000908690602001611e20565b60405160208183030381529060405280519060200120868685856104928585858585610979565b50600061049e8c610af7565b90506104ab818b8b610b57565b807fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78b6040516104db9190611909565b60405180910390a260405181906001600160a01b038e16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a350505050505095945050505050565b6060610535848484610bdd565b949350505050565b606061042f82610cbf565b610550610d80565b61055a6000610dda565b565b604051600090610592907f7f87032e00000000000000000000000000000000000000000000000000000000908690602001611e20565b604051602081830303815290604052805190602001208584846105b784848484610e42565b5060006105c38a610af7565b90506105d0818a8a610b57565b60405181906001600160a01b038c16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a39998505050505050505050565b60006106223386868686610946565b95945050505050565b606061063960008484610f2e565b9392505050565b60405160009061067c907fb557a1ff00000000000000000000000000000000000000000000000000000000908990899089908990602001611e50565b60405160208183030381529060405280519060200120898985856106a38585858585610979565b5060006106af8f610af7565b90506106bf818e8e8e8e8e611107565b50505050505098975050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006106fd836111d4565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b604051600090610768907fc01f93d300000000000000000000000000000000000000000000000000000000908990899089908990602001611e50565b6040516020818303038152906040528051906020012088848461078d84848484610e42565b5060006107998d610af7565b90506107a9818d8d8d8d8d611107565b9c9b505050505050505050505050565b806107c381611254565b506107cd826112b2565b5050565b600061042f3383610841565b6040517fc7ee930c0000000000000000000000000000000000000000000000000000000060208201526024016040516020818303038152906040528051906020012083838361082e84848484610e42565b50610838876112b2565b50505050505050565b60008261084d81611254565b50600061085985610af7565b9050610866818542610b57565b60405181906001600160a01b038716907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a3949350505050565b6060610535848484610f2e565b6108b9610d80565b6001600160a01b03811661093a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61094381610dda565b50565b60008561095281611254565b50600061095e88610af7565b905061096e818888888842611107565b979650505050505050565b60408051602081018790526bffffffffffffffffffffffff19606087811b8216938301939093529185901b9091166054820152606881018390527f000000000000000000000000000000000000000000000000000000000000000060888201526000908190610a2f9060a8015b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90506000610a3c87610af7565b9050610a48878761139d565b610a7e576040517f4570a02400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a89868386611422565b610aa657604051638baa579f60e01b815260040160405180910390fd5b60008181526001602052604090205485111580610ace575042610acb6103e887611ea1565b10155b15610aec576040516314323cbb60e21b815260040160405180910390fd5b505095945050505050565b600080610b03836111d4565b604080517f0000000000000000000000000000000000000000000000000000000000000000602082015290810182905290915060600160405160208183030381529060405280519060200120915050919050565b60008381526004602090815260408083205467ffffffffffffffff168352600382528083208684529091529020610b8e8382611f4c565b506000838152600160205260409020819055827fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f783604051610bd09190611909565b60405180910390a2505050565b60008381526004602090815260408083205467ffffffffffffffff1683526002825280832086845290915290819020905160609190610c1f908590859061200c565b90815260200160405180910390208054610c3890611ec3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6490611ec3565b8015610cb15780601f10610c8657610100808354040283529160200191610cb1565b820191906000526020600020905b815481529060010190602001808311610c9457829003601f168201915b505050505090509392505050565b60008181526004602090815260408083205467ffffffffffffffff168352600382528083208484529091529020805460609190610cfb90611ec3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2790611ec3565b8015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505050509050919050565b6000546001600160a01b0316331461055a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610931565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610ea78686867f00000000000000000000000000000000000000000000000000000000000000006040516020016109e6949392919093845260609290921b6bffffffffffffffffffffffff191660208401526034830152605482015260740190565b90506000610eb486610af7565b9050610ec186838661153d565b610ede57604051638baa579f60e01b815260040160405180910390fd5b60008181526001602052604090205485111580610f06575042610f036103e887611ea1565b10155b15610f24576040516314323cbb60e21b815260040160405180910390fd5b5050949350505050565b60608167ffffffffffffffff811115610f4957610f496116f5565b604051908082528060200260200182016040528015610f7c57816020015b6060815260200190600190039081610f675790505b50905060005b828110156110ff578415611047576000848483818110610fa457610fa461201c565b9050602002810190610fb69190612032565b610fc591602491600491612079565b610fce916120a3565b90508581146110455760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401610931565b505b6000803086868581811061105d5761105d61201c565b905060200281019061106f9190612032565b60405161107d92919061200c565b600060405180830381855af49150503d80600081146110b8576040519150601f19603f3d011682016040523d82523d6000602084013e6110bd565b606091505b5091509150816110cc57600080fd5b808484815181106110df576110df61201c565b6020026020010181905250505080806110f7906120c1565b915050610f82565b509392505050565b60008681526004602090815260408083205467ffffffffffffffff1683526002825280832089845290915290819020905184918491611149908990899061200c565b908152602001604051809103902091826111649291906120da565b506000868152600160205260409020819055848460405161118692919061200c565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1878787876040516111c494939291906121c4565b60405180910390a3505050505050565b600060285b801561124857600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506111d9565b50506028600020919050565b60006001600160a01b03821633148015906112765750611274823361139d565b155b156112ad576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60006112bd826111d4565b604080517f0000000000000000000000000000000000000000000000000000000000000000602082015290810182905290915060009060600160408051601f19818403018152918152815160209283012060008181526004909352908220805491935067ffffffffffffffff90911691611336836121eb565b82546101009290920a67ffffffffffffffff8181021990931691831602179091556000838152600460209081526040918290205491519190921681528392507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db4449101610bd0565b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113f9575060408051601f3d908101601f191682019092526113f691810190612212565b60015b6114055750600061042f565b826001600160a01b0316816001600160a01b03161491505061042f565b6000806000856001600160a01b0316631626ba7e60e01b868660405160240161144c92919061222f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161149f9190612248565b600060405180830381855afa9150503d80600081146114da576040519150601f19603f3d011682016040523d82523d6000602084013e6114df565b606091505b50915091508180156114f357506020815110155b8015611533575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906115319083016020908101908401612264565b145b9695505050505050565b600080600061154c8585611594565b909250905060008160048111156115655761156561227d565b1480156115835750856001600160a01b0316826001600160a01b0316145b806115335750611533868686611422565b60008082516041036115ca5760208301516040840151606085015160001a6115be878285856115d9565b945094505050506115d2565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156116105750600090506003611694565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611664573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661168d57600060019250925050611694565b9150600090505b94509492505050565b6000602082840312156116af57600080fd5b81356001600160e01b03198116811461063957600080fd5b6000602082840312156116d957600080fd5b5035919050565b6001600160a01b038116811461094357600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261171c57600080fd5b813567ffffffffffffffff80821115611737576117376116f5565b604051601f8301601f19908116603f0116810190828211818310171561175f5761175f6116f5565b8160405283815286602085880101111561177857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156117b057600080fd5b85356117bb816116e0565b945060208601356117cb816116e0565b9350604086013567ffffffffffffffff808211156117e857600080fd5b6117f489838a0161170b565b945060608801359350608088013591508082111561181157600080fd5b5061181e8882890161170b565b9150509295509295909350565b60008083601f84011261183d57600080fd5b50813567ffffffffffffffff81111561185557600080fd5b6020830191508360208285010111156115d257600080fd5b60008060006040848603121561188257600080fd5b83359250602084013567ffffffffffffffff8111156118a057600080fd5b6118ac8682870161182b565b9497909650939450505050565b60005b838110156118d45781810151838201526020016118bc565b50506000910152565b600081518084526118f58160208601602086016118b9565b601f01601f19169290920160200192915050565b60208152600061063960208301846118dd565b6000806000806080858703121561193257600080fd5b843561193d816116e0565b9350602085013567ffffffffffffffff8082111561195a57600080fd5b6119668883890161170b565b945060408701359350606087013591508082111561198357600080fd5b506119908782880161170b565b91505092959194509250565b600080600080604085870312156119b257600080fd5b843567ffffffffffffffff808211156119ca57600080fd5b6119d68883890161182b565b909650945060208701359150808211156119ef57600080fd5b506119fc8782880161182b565b95989497509550505050565b60008083601f840112611a1a57600080fd5b50813567ffffffffffffffff811115611a3257600080fd5b6020830191508360208260051b85010111156115d257600080fd5b60008060208385031215611a6057600080fd5b823567ffffffffffffffff811115611a7757600080fd5b611a8385828601611a08565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611ae457603f19888603018452611ad28583516118dd565b94509285019290850190600101611ab6565b5092979650505050505050565b60008060008060008060008060c0898b031215611b0d57600080fd5b8835611b18816116e0565b97506020890135611b28816116e0565b9650604089013567ffffffffffffffff80821115611b4557600080fd5b611b518c838d0161182b565b909850965060608b0135915080821115611b6a57600080fd5b611b768c838d0161182b565b909650945060808b0135935060a08b0135915080821115611b9657600080fd5b50611ba38b828c0161170b565b9150509295985092959890939650565b600060208284031215611bc557600080fd5b8135610639816116e0565b600080600080600080600060a0888a031215611beb57600080fd5b8735611bf6816116e0565b9650602088013567ffffffffffffffff80821115611c1357600080fd5b611c1f8b838c0161182b565b909850965060408a0135915080821115611c3857600080fd5b611c448b838c0161182b565b909650945060608a0135935060808a0135915080821115611c6457600080fd5b50611c718a828b0161170b565b91505092959891949750929550565b600060208284031215611c9257600080fd5b813567ffffffffffffffff811115611ca957600080fd5b6105358482850161170b565b600080600060608486031215611cca57600080fd5b8335611cd5816116e0565b925060208401359150604084013567ffffffffffffffff811115611cf857600080fd5b611d048682870161170b565b9150509250925092565b60008060408385031215611d2157600080fd5b8235611d2c816116e0565b9150602083013567ffffffffffffffff811115611d4857600080fd5b611d548582860161170b565b9150509250929050565b600080600060408486031215611d7357600080fd5b83359250602084013567ffffffffffffffff811115611d9157600080fd5b6118ac86828701611a08565b600080600080600060608688031215611db557600080fd5b8535611dc0816116e0565b9450602086013567ffffffffffffffff80821115611ddd57600080fd5b611de989838a0161182b565b90965094506040880135915080821115611e0257600080fd5b50611e0f8882890161182b565b969995985093965092949392505050565b6001600160e01b03198316815260008251611e428160048501602087016118b9565b919091016004019392505050565b6001600160e01b0319861681528385600483013760008482016004810160008152848682375060009301600401928352509095945050505050565b634e487b7160e01b600052601160045260246000fd5b600082611ebe57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680611ed757607f821691505b602082108103611ef757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611f4757600081815260208120601f850160051c81016020861015611f245750805b601f850160051c820191505b81811015611f4357828155600101611f30565b5050505b505050565b815167ffffffffffffffff811115611f6657611f666116f5565b611f7a81611f748454611ec3565b84611efd565b602080601f831160018114611faf5760008415611f975750858301515b600019600386901b1c1916600185901b178555611f43565b600085815260208120601f198616915b82811015611fde57888601518255948401946001909101908401611fbf565b5085821015611ffc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261204957600080fd5b83018035915067ffffffffffffffff82111561206457600080fd5b6020019150368190038213156115d257600080fd5b6000808585111561208957600080fd5b8386111561209657600080fd5b5050820193919092039150565b8035602083101561042f57600019602084900360031b1b1692915050565b6000600182016120d3576120d3611e8b565b5060010190565b67ffffffffffffffff8311156120f2576120f26116f5565b612106836121008354611ec3565b83611efd565b6000601f84116001811461213a57600085156121225750838201355b600019600387901b1c1916600186901b178355612194565b600083815260209020601f19861690835b8281101561216b578685013582556020948501946001909201910161214b565b50868210156121885760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006121d860408301868861219b565b828103602084015261096e81858761219b565b600067ffffffffffffffff80831681810361220857612208611e8b565b6001019392505050565b60006020828403121561222457600080fd5b8151610639816116e0565b82815260406020820152600061053560408301846118dd565b6000825161225a8184602087016118b9565b9190910192915050565b60006020828403121561227657600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212204963adf5f434a8021ce15fb89efc92356e52c0855e2bc1bbbf41e9d791975bc664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063a9c73e80116100e3578063c47f00271161008c578063e32954eb11610066578063e32954eb14610393578063f2fde38b146103a6578063fe43ca31146103b957600080fd5b8063c47f00271461035a578063c7ee930c1461036d578063c91199411461038057600080fd5b8063bffbe61c116100bd578063bffbe61c14610321578063c01f93d314610334578063c0a404bc1461034757600080fd5b8063a9c73e80146102db578063ac9650d8146102ee578063b557a1ff1461030e57600080fd5b806359d1d43c116101455780637f87032e1161011f5780637f87032e1461028657806380d8db3d146102995780638da5cb5b146102c057600080fd5b806359d1d43c14610249578063691f343114610269578063715018a61461027c57600080fd5b80630affd653116101765780630affd653146101e85780631fe93ea8146101fb57806324d79eab1461022257600080fd5b806301ffc9a714610192578063060eb2f5146101ba575b600080fd5b6101a56101a036600461169d565b6103cc565b60405190151581526020015b60405180910390f35b6101da6101c83660046116c7565b60016020526000908152604090205481565b6040519081526020016101b1565b6101da6101f6366004611798565b610435565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b61025c61025736600461186d565b610528565b6040516101b19190611909565b61025c6102773660046116c7565b61053d565b610284610548565b005b6101da61029436600461191c565b61055c565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b0390911681526020016101b1565b6101da6102e936600461199c565b610613565b6103016102fc366004611a4d565b61062b565b6040516101b19190611a8f565b6101da61031c366004611af1565b610640565b6101da61032f366004611bb3565b6106d1565b6101da610342366004611bd0565b61072c565b610284610355366004611bb3565b6107b9565b6101da610368366004611c80565b6107d1565b61028461037b366004611cb5565b6107dd565b6101da61038e366004611d0e565b610841565b6103016103a1366004611d5e565b6108a4565b6102846103b4366004611bb3565b6108b1565b6101da6103c7366004611d9d565b610946565b60006001600160e01b031982167f1528feca00000000000000000000000000000000000000000000000000000000148061042f57507fc78de5ed000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60405160009061046b907f0affd65300000000000000000000000000000000000000000000000000000000908690602001611e20565b60405160208183030381529060405280519060200120868685856104928585858585610979565b50600061049e8c610af7565b90506104ab818b8b610b57565b807fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78b6040516104db9190611909565b60405180910390a260405181906001600160a01b038e16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a350505050505095945050505050565b6060610535848484610bdd565b949350505050565b606061042f82610cbf565b610550610d80565b61055a6000610dda565b565b604051600090610592907f7f87032e00000000000000000000000000000000000000000000000000000000908690602001611e20565b604051602081830303815290604052805190602001208584846105b784848484610e42565b5060006105c38a610af7565b90506105d0818a8a610b57565b60405181906001600160a01b038c16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a39998505050505050505050565b60006106223386868686610946565b95945050505050565b606061063960008484610f2e565b9392505050565b60405160009061067c907fb557a1ff00000000000000000000000000000000000000000000000000000000908990899089908990602001611e50565b60405160208183030381529060405280519060200120898985856106a38585858585610979565b5060006106af8f610af7565b90506106bf818e8e8e8e8e611107565b50505050505098975050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006106fd836111d4565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b604051600090610768907fc01f93d300000000000000000000000000000000000000000000000000000000908990899089908990602001611e50565b6040516020818303038152906040528051906020012088848461078d84848484610e42565b5060006107998d610af7565b90506107a9818d8d8d8d8d611107565b9c9b505050505050505050505050565b806107c381611254565b506107cd826112b2565b5050565b600061042f3383610841565b6040517fc7ee930c0000000000000000000000000000000000000000000000000000000060208201526024016040516020818303038152906040528051906020012083838361082e84848484610e42565b50610838876112b2565b50505050505050565b60008261084d81611254565b50600061085985610af7565b9050610866818542610b57565b60405181906001600160a01b038716907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a3949350505050565b6060610535848484610f2e565b6108b9610d80565b6001600160a01b03811661093a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61094381610dda565b50565b60008561095281611254565b50600061095e88610af7565b905061096e818888888842611107565b979650505050505050565b60408051602081018790526bffffffffffffffffffffffff19606087811b8216938301939093529185901b9091166054820152606881018390527f000000000000000000000000000000000000000000000000000000000000000060888201526000908190610a2f9060a8015b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90506000610a3c87610af7565b9050610a48878761139d565b610a7e576040517f4570a02400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a89868386611422565b610aa657604051638baa579f60e01b815260040160405180910390fd5b60008181526001602052604090205485111580610ace575042610acb6103e887611ea1565b10155b15610aec576040516314323cbb60e21b815260040160405180910390fd5b505095945050505050565b600080610b03836111d4565b604080517f0000000000000000000000000000000000000000000000000000000000000000602082015290810182905290915060600160405160208183030381529060405280519060200120915050919050565b60008381526004602090815260408083205467ffffffffffffffff168352600382528083208684529091529020610b8e8382611f4c565b506000838152600160205260409020819055827fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f783604051610bd09190611909565b60405180910390a2505050565b60008381526004602090815260408083205467ffffffffffffffff1683526002825280832086845290915290819020905160609190610c1f908590859061200c565b90815260200160405180910390208054610c3890611ec3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6490611ec3565b8015610cb15780601f10610c8657610100808354040283529160200191610cb1565b820191906000526020600020905b815481529060010190602001808311610c9457829003601f168201915b505050505090509392505050565b60008181526004602090815260408083205467ffffffffffffffff168352600382528083208484529091529020805460609190610cfb90611ec3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2790611ec3565b8015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505050509050919050565b6000546001600160a01b0316331461055a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610931565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610ea78686867f00000000000000000000000000000000000000000000000000000000000000006040516020016109e6949392919093845260609290921b6bffffffffffffffffffffffff191660208401526034830152605482015260740190565b90506000610eb486610af7565b9050610ec186838661153d565b610ede57604051638baa579f60e01b815260040160405180910390fd5b60008181526001602052604090205485111580610f06575042610f036103e887611ea1565b10155b15610f24576040516314323cbb60e21b815260040160405180910390fd5b5050949350505050565b60608167ffffffffffffffff811115610f4957610f496116f5565b604051908082528060200260200182016040528015610f7c57816020015b6060815260200190600190039081610f675790505b50905060005b828110156110ff578415611047576000848483818110610fa457610fa461201c565b9050602002810190610fb69190612032565b610fc591602491600491612079565b610fce916120a3565b90508581146110455760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401610931565b505b6000803086868581811061105d5761105d61201c565b905060200281019061106f9190612032565b60405161107d92919061200c565b600060405180830381855af49150503d80600081146110b8576040519150601f19603f3d011682016040523d82523d6000602084013e6110bd565b606091505b5091509150816110cc57600080fd5b808484815181106110df576110df61201c565b6020026020010181905250505080806110f7906120c1565b915050610f82565b509392505050565b60008681526004602090815260408083205467ffffffffffffffff1683526002825280832089845290915290819020905184918491611149908990899061200c565b908152602001604051809103902091826111649291906120da565b506000868152600160205260409020819055848460405161118692919061200c565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1878787876040516111c494939291906121c4565b60405180910390a3505050505050565b600060285b801561124857600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506111d9565b50506028600020919050565b60006001600160a01b03821633148015906112765750611274823361139d565b155b156112ad576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60006112bd826111d4565b604080517f0000000000000000000000000000000000000000000000000000000000000000602082015290810182905290915060009060600160408051601f19818403018152918152815160209283012060008181526004909352908220805491935067ffffffffffffffff90911691611336836121eb565b82546101009290920a67ffffffffffffffff8181021990931691831602179091556000838152600460209081526040918290205491519190921681528392507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db4449101610bd0565b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113f9575060408051601f3d908101601f191682019092526113f691810190612212565b60015b6114055750600061042f565b826001600160a01b0316816001600160a01b03161491505061042f565b6000806000856001600160a01b0316631626ba7e60e01b868660405160240161144c92919061222f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161149f9190612248565b600060405180830381855afa9150503d80600081146114da576040519150601f19603f3d011682016040523d82523d6000602084013e6114df565b606091505b50915091508180156114f357506020815110155b8015611533575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906115319083016020908101908401612264565b145b9695505050505050565b600080600061154c8585611594565b909250905060008160048111156115655761156561227d565b1480156115835750856001600160a01b0316826001600160a01b0316145b806115335750611533868686611422565b60008082516041036115ca5760208301516040840151606085015160001a6115be878285856115d9565b945094505050506115d2565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156116105750600090506003611694565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611664573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661168d57600060019250925050611694565b9150600090505b94509492505050565b6000602082840312156116af57600080fd5b81356001600160e01b03198116811461063957600080fd5b6000602082840312156116d957600080fd5b5035919050565b6001600160a01b038116811461094357600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261171c57600080fd5b813567ffffffffffffffff80821115611737576117376116f5565b604051601f8301601f19908116603f0116810190828211818310171561175f5761175f6116f5565b8160405283815286602085880101111561177857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156117b057600080fd5b85356117bb816116e0565b945060208601356117cb816116e0565b9350604086013567ffffffffffffffff808211156117e857600080fd5b6117f489838a0161170b565b945060608801359350608088013591508082111561181157600080fd5b5061181e8882890161170b565b9150509295509295909350565b60008083601f84011261183d57600080fd5b50813567ffffffffffffffff81111561185557600080fd5b6020830191508360208285010111156115d257600080fd5b60008060006040848603121561188257600080fd5b83359250602084013567ffffffffffffffff8111156118a057600080fd5b6118ac8682870161182b565b9497909650939450505050565b60005b838110156118d45781810151838201526020016118bc565b50506000910152565b600081518084526118f58160208601602086016118b9565b601f01601f19169290920160200192915050565b60208152600061063960208301846118dd565b6000806000806080858703121561193257600080fd5b843561193d816116e0565b9350602085013567ffffffffffffffff8082111561195a57600080fd5b6119668883890161170b565b945060408701359350606087013591508082111561198357600080fd5b506119908782880161170b565b91505092959194509250565b600080600080604085870312156119b257600080fd5b843567ffffffffffffffff808211156119ca57600080fd5b6119d68883890161182b565b909650945060208701359150808211156119ef57600080fd5b506119fc8782880161182b565b95989497509550505050565b60008083601f840112611a1a57600080fd5b50813567ffffffffffffffff811115611a3257600080fd5b6020830191508360208260051b85010111156115d257600080fd5b60008060208385031215611a6057600080fd5b823567ffffffffffffffff811115611a7757600080fd5b611a8385828601611a08565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611ae457603f19888603018452611ad28583516118dd565b94509285019290850190600101611ab6565b5092979650505050505050565b60008060008060008060008060c0898b031215611b0d57600080fd5b8835611b18816116e0565b97506020890135611b28816116e0565b9650604089013567ffffffffffffffff80821115611b4557600080fd5b611b518c838d0161182b565b909850965060608b0135915080821115611b6a57600080fd5b611b768c838d0161182b565b909650945060808b0135935060a08b0135915080821115611b9657600080fd5b50611ba38b828c0161170b565b9150509295985092959890939650565b600060208284031215611bc557600080fd5b8135610639816116e0565b600080600080600080600060a0888a031215611beb57600080fd5b8735611bf6816116e0565b9650602088013567ffffffffffffffff80821115611c1357600080fd5b611c1f8b838c0161182b565b909850965060408a0135915080821115611c3857600080fd5b611c448b838c0161182b565b909650945060608a0135935060808a0135915080821115611c6457600080fd5b50611c718a828b0161170b565b91505092959891949750929550565b600060208284031215611c9257600080fd5b813567ffffffffffffffff811115611ca957600080fd5b6105358482850161170b565b600080600060608486031215611cca57600080fd5b8335611cd5816116e0565b925060208401359150604084013567ffffffffffffffff811115611cf857600080fd5b611d048682870161170b565b9150509250925092565b60008060408385031215611d2157600080fd5b8235611d2c816116e0565b9150602083013567ffffffffffffffff811115611d4857600080fd5b611d548582860161170b565b9150509250929050565b600080600060408486031215611d7357600080fd5b83359250602084013567ffffffffffffffff811115611d9157600080fd5b6118ac86828701611a08565b600080600080600060608688031215611db557600080fd5b8535611dc0816116e0565b9450602086013567ffffffffffffffff80821115611ddd57600080fd5b611de989838a0161182b565b90965094506040880135915080821115611e0257600080fd5b50611e0f8882890161182b565b969995985093965092949392505050565b6001600160e01b03198316815260008251611e428160048501602087016118b9565b919091016004019392505050565b6001600160e01b0319861681528385600483013760008482016004810160008152848682375060009301600401928352509095945050505050565b634e487b7160e01b600052601160045260246000fd5b600082611ebe57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680611ed757607f821691505b602082108103611ef757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611f4757600081815260208120601f850160051c81016020861015611f245750805b601f850160051c820191505b81811015611f4357828155600101611f30565b5050505b505050565b815167ffffffffffffffff811115611f6657611f666116f5565b611f7a81611f748454611ec3565b84611efd565b602080601f831160018114611faf5760008415611f975750858301515b600019600386901b1c1916600185901b178555611f43565b600085815260208120601f198616915b82811015611fde57888601518255948401946001909101908401611fbf565b5085821015611ffc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261204957600080fd5b83018035915067ffffffffffffffff82111561206457600080fd5b6020019150368190038213156115d257600080fd5b6000808585111561208957600080fd5b8386111561209657600080fd5b5050820193919092039150565b8035602083101561042f57600019602084900360031b1b1692915050565b6000600182016120d3576120d3611e8b565b5060010190565b67ffffffffffffffff8311156120f2576120f26116f5565b612106836121008354611ec3565b83611efd565b6000601f84116001811461213a57600085156121225750838201355b600019600387901b1c1916600186901b178355612194565b600083815260209020601f19861690835b8281101561216b578685013582556020948501946001909201910161214b565b50868210156121885760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006121d860408301868861219b565b828103602084015261096e81858761219b565b600067ffffffffffffffff80831681810361220857612208611e8b565b6001019392505050565b60006020828403121561222457600080fd5b8151610639816116e0565b82815260406020820152600061053560408301846118dd565b6000825161225a8184602087016118b9565b9190910192915050565b60006020828403121561227657600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212204963adf5f434a8021ce15fb89efc92356e52c0855e2bc1bbbf41e9d791975bc664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clearRecords(address)": {
        "params": {
          "addr": "The node to update."
        }
      },
      "clearRecordsWithSignature(address,uint256,bytes)": {
        "params": {
          "addr": "The node to update.",
          "signature": "A signature proving ownership of the node."
        }
      },
      "name(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "node(address)": {
        "details": "Returns the node hash for a given account's reverse records.",
        "params": {
          "addr": "The address to hash"
        },
        "returns": {
          "_0": "The ENS node hash."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setName(string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the calling account.",
        "params": {
          "name": "The name to set for this address."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddr(address,string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the addr provided account. Can be used if the addr is a contract that is owned by a SCW.",
        "params": {
          "name": "The name to set for this address."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddrWithSignature(address,string,uint256,bytes)": {
        "details": "Sets the name for an addr using a signature that can be verified with ERC1271.",
        "params": {
          "addr": "The reverse record to set",
          "inceptionDate": "Date from when this signature is valid from",
          "name": "The name of the reverse record",
          "signature": "The resolver of the reverse node"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddrWithSignatureAndOwnable(address,address,string,uint256,bytes)": {
        "details": "Sets the name for a contract that is owned by a SCW using a signature",
        "params": {
          "contractAddr": "The reverse node to set",
          "inceptionDate": "Date from when this signature is valid from",
          "name": "The name of the reverse record",
          "owner": "The owner of the contract (via Ownable)",
          "signature": "The signature of an address that will return true on isValidSignature for the owner"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setText(string,string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the calling account.",
        "params": {
          "key": "The key for this text record.",
          "value": "The value to set for this text record."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setTextForAddr(address,string,string)": {
        "details": "Sets the `text(key)` record for the reverse ENS record associated with the addr provided account.",
        "params": {
          "key": "The key for this text record.",
          "value": "The value to set for this text record."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setTextForAddrWithSignature(address,string,string,uint256,bytes)": {
        "details": "Sets the name for an addr using a signature that can be verified with ERC1271.",
        "params": {
          "addr": "The reverse record to set",
          "inceptionDate": "Date from when this signature is valid from",
          "key": "The key of the text record",
          "signature": "The resolver of the reverse node",
          "value": "The value of the text record"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setTextForAddrWithSignatureAndOwnable(address,address,string,string,uint256,bytes)": {
        "details": "Sets the name for a contract that is owned by a SCW using a signature",
        "params": {
          "contractAddr": "The reverse node to set",
          "inceptionDate": "Date from when this signature is valid from",
          "key": "The name of the reverse record",
          "owner": "The owner of the contract (via Ownable)",
          "signature": "The signature of an address that will return true on isValidSignature for the owner",
          "value": "The name of the reverse record"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated text data."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clearRecords(address)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "clearRecordsWithSignature(address,uint256,bytes)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "name(bytes32)": {
        "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an ENS node and key."
      }
    },
    "notice": "A L2 reverser registrar. Deployed to each L2 chain. The contract will be verified on L1 Reverse Resolver under the namespace specified at constructor",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/reverseRegistrar/L2ReverseRegistrar.sol:L2ReverseRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3195,
        "contract": "contracts/reverseRegistrar/L2ReverseRegistrar.sol:L2ReverseRegistrar",
        "label": "lastUpdated",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3203,
        "contract": "contracts/reverseRegistrar/L2ReverseRegistrar.sol:L2ReverseRegistrar",
        "label": "versionable_texts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))"
      },
      {
        "astId": 3209,
        "contract": "contracts/reverseRegistrar/L2ReverseRegistrar.sol:L2ReverseRegistrar",
        "label": "versionable_names",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))"
      },
      {
        "astId": 3213,
        "contract": "contracts/reverseRegistrar/L2ReverseRegistrar.sol:L2ReverseRegistrar",
        "label": "recordVersions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(string => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_string_storage)"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}